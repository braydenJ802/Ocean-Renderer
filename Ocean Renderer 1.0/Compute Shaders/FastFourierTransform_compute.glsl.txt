#version 450
void PrecomputeTwiddleFactorsAndInputIndices()
void HorizontalStepFFT()
void VerticalStepFFT()
void HorizontalStepInverseFFT()
void VerticalStepInverseFFT()
void Scale()
void Permute()

static const float PI = 3.1415926;

layout(rgba32f) writeonly uniform image2D<vec4> PrecomputeBuffer;
layout(rgba32f) readonly uniform image2D<vec4> PrecomputedData;
layout(rgba32f) writeonly uniform image2D<vec2> Buffer0;
layout(rgba32f) writeonly uniform image2D<vec2> Buffer1;
bool PingPong;
uint Step;
uint Size;

vec2 ComplexMult(vec2 a, vec2 b)
{
	return vec2(a.r * b.r - a.g * b.g, a.r * b.g + a.g * b.r);
}

vec2 ComplexExp(vec2 a)
{
	return vec2(cos(a.y), sin(a.y)) * exp(a.x);
}

layout(local_size_x = 1, local_size_y = 8, local_size_z = 1) in;
void PrecomputeTwiddleFactorsAndInputIndices(uint3 id : SV_DispatchThreadID)
{
	uint b = Size >> (id.x + 1);
	vec2 mult = 2 * PI * vec2(0, 1) / Size;
	uint i = (2 * b * (id.y / b) + id.y % b) % Size;
	vec2 twiddle = ComplexExp(-mult * ((id.y / b) * b));
	PrecomputeBuffer[id.xy] = vec4(twiddle.x, twiddle.y, i, i + b);
	PrecomputeBuffer[uint2(id.x, id.y + Size / 2)] = vec4(-twiddle.x, -twiddle.y, i, i + b);
}

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void HorizontalStepFFT (uint3 id : SV_DispatchThreadID)
{
	vec4 data = PrecomputedData[uint2(Step, id.x)];
	uint2 inputsIndices = (uint2)data.ba;
	if (PingPong)
	{
		Buffer1[id.xy] = Buffer0[uint2(inputsIndices.x, id.y)]
			+ ComplexMult(data.rg, Buffer0[uint2(inputsIndices.y, id.y)]);
	}
	else
	{
		Buffer0[id.xy] = Buffer1[uint2(inputsIndices.x, id.y)]
			+ ComplexMult(data.rg, Buffer1[uint2(inputsIndices.y, id.y)]);
	}
}

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void VerticalStepFFT(uint3 id : SV_DispatchThreadID)
{
	vec4 data = PrecomputedData[uint2(Step, id.y)];
	uint2 inputsIndices = (uint2)data.ba;
	if (PingPong)
	{
		Buffer1[id.xy] = Buffer0[uint2(id.x, inputsIndices.x)]
			+ ComplexMult(data.rg, Buffer0[uint2(id.x, inputsIndices.y)]);
	}
	else
	{
		Buffer0[id.xy] = Buffer1[uint2(id.x, inputsIndices.x)]
			+ ComplexMult(data.rg, Buffer1[uint2(id.x, inputsIndices.y)]);
	}
}

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void HorizontalStepInverseFFT(uint3 id : SV_DispatchThreadID)
{
	vec4 data = PrecomputedData[uint2(Step, id.x)];
	uint2 inputsIndices = (uint2)data.ba;
	if (PingPong)
	{
		Buffer1[id.xy] = Buffer0[uint2(inputsIndices.x, id.y)]
			+ ComplexMult(vec2(data.r, -data.g), Buffer0[uint2(inputsIndices.y, id.y)]);
	}
	else
	{
		Buffer0[id.xy] = Buffer1[uint2(inputsIndices.x, id.y)]
			+ ComplexMult(vec2(data.r, -data.g), Buffer1[uint2(inputsIndices.y, id.y)]);
	}
}

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void VerticalStepInverseFFT(uint3 id : SV_DispatchThreadID)
{
	vec4 data = PrecomputedData[uint2(Step, id.y)];
	uint2 inputsIndices = (uint2)data.ba;
	if (PingPong)
	{
		Buffer1[id.xy] = Buffer0[uint2(id.x, inputsIndices.x)]
			+ ComplexMult(vec2(data.r, -data.g), Buffer0[uint2(id.x, inputsIndices.y)]);
	}
	else
	{
		Buffer0[id.xy] = Buffer1[uint2(id.x, inputsIndices.x)]
			+ ComplexMult(vec2(data.r, -data.g), Buffer1[uint2(id.x, inputsIndices.y)]);
	}
}

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void Scale(uint3 id : SV_DispatchThreadID)
{
	Buffer0[id.xy] = Buffer0[id.xy] / Size / Size;
}

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void Permute(uint3 id : SV_DispatchThreadID)
{
	Buffer0[id.xy] = Buffer0[id.xy] * (1.0 - 2.0 * ((id.x + id.y) % 2));
}
